version: '3.8'

services:
  # Main IDS Detection Engine
  ids-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: enhanced-ids-engine
    restart: unless-stopped
    network_mode: host  # Required for network packet capture
    privileged: true    # Required for iptables and network operations
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./models:/app/models
      - ./enhanced_ids_model_99percent.h5:/app/enhanced_ids_model_99percent.h5:ro
      - ./feature_scaler.pkl:/app/feature_scaler.pkl:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PYTHONPATH=/app
      - IDS_MODE=production
      - LOG_LEVEL=INFO
      - INTERFACE=auto
    command: ["python", "ids.py"]
    healthcheck:
      test: ["CMD", "python", "-c", "import psutil; exit(0 if any('ids.py' in p.cmdline() for p in psutil.process_iter()) else 1)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Professional Dashboard
  ids-dashboard:
    build:
      context: .
      dockerfile: Dockerfile
      target: dashboard
    container_name: enhanced-ids-dashboard
    restart: unless-stopped
    ports:
      - "8501:8501"
    volumes:
      - ./logs:/app/logs:ro
      - ./data:/app/data:ro
      - .:/app:ro
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - STREAMLIT_BROWSER_GATHER_USAGE_STATS=false
    depends_on:
      - ids-engine
    command: ["streamlit", "run", "professional_dashboard.py", "--server.port=8501", "--server.address=0.0.0.0", "--server.headless=true"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: ids-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: ids-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ids-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ids-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ids-dashboard
      - grafana

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
